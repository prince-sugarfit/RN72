
apply plugin: "com.android.application"
apply plugin: "nebula.dependency-lock"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    debuggableVariants = ["debugSugarfit"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    configurations.all {
        exclude group: 'com.facebook.react:react-native'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    namespace "com.rn72"
    defaultConfig {
        applicationId "com.rn72"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        resConfigs "en"
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g" //specify the heap size for the dex process
    }
    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds false
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = "11"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            matchingFallbacks = ['stage','debug', 'release']
        }
    }
    compileOptions {
        sourceCompatibility 11
        targetCompatibility 11
    }
    packagingOptions {
        // Required by Qualcomm SNPE SDK: snpe-release & platform-validator
        // https://developer.qualcomm.com/docs/snpe/android_tutorial.html
        pickFirst 'lib/armeabi-v7a/libsymphony-cpu.so'
        pickFirst 'lib/arm64-v8a/libsymphony-cpu.so'

        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/armeabi-v7a/libc++_shared.so'

        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
        pickFirst '**/x86_64/libjsc.so'
        pickFirst '**/arm64-v8a/libjsc.so'

        pickFirst '**/*.so'
  }
      externalNativeBuild {
        cmake {
          path "src/main/cpp/CMakeLists.txt"
          version "3.22.1"
        }
      }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.30"

    // camerax
    def camerax_version = '1.0.0-rc01'
    def camerax_view_version = '1.0.0-alpha20'
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_view_version}"

    //mlkit
    def mlkit_version = "16.0.3"
    implementation "com.google.mlkit:face-detection:${mlkit_version}"

    //socket
    implementation "com.neovisionaries:nv-websocket-client:2.4"

    //opencv
    def opencv_version = '4.3.0'
    implementation "com.github.iamareebjamal:opencv-android:${opencv_version}"

    // Add the Firebase Crashlytics SDK.
    implementation 'com.google.firebase:firebase-crashlytics:18.2.6'
    // Recommended: Add the Google Analytics SDK.
    implementation 'com.google.firebase:firebase-analytics:20.0.1'

    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation 'com.airbnb.android:lottie:3.0.7'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.github.checkout:frames-android:v2.0.5'
    implementation 'com.android.installreferrer:installreferrer:2.1'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    implementation 'commons-io:commons-io:2.6'
    implementation "com.google.firebase:firebase-messaging:23.0.0"
    implementation "com.google.android.gms:play-services-base:18.0.1"
    implementation "com.google.android.gms:play-services-cast-framework:21.0.0"
    implementation 'com.1gravity:android-contactpicker:1.3.2'
    implementation 'androidx.work:work-runtime:2.8.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.0'
    implementation ("com.google.android.gms:play-services-location:19.0.0")

    // For animated GIF support

    implementation 'com.google.android.play:core:1.9.0'

    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation 'com.facebook.fresco:fresco:2.6.0'   // for rendering gifs
    implementation 'com.facebook.fresco:animated-webp:2.6.0'
    implementation 'com.facebook.fresco:webpsupport:2.6.0'
    implementation 'com.android.billingclient:billing:4.1.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
